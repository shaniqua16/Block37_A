// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  username  String    @unique
  password  String
  name      String?
  reviews   Review[]
  profile   Profile?
  comments  Comment[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Profile {
  id     String  @id @default(uuid())
  bio    String?
  user   User    @relation(fields: [userId], references: [id])
  userId String  @unique
}

model Item {
  id          String   @id @default(uuid())
  name        String?
  description String?
  review      Review[]
}

model Review {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  rating    Int
  content   String?
  published Boolean  @default(false)

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String
  item     Item      @relation(fields: [itemId], references: [id], onDelete: Cascade)
  itemId   String
  comments Comment[]

  @@unique([userId, itemId])
}

model Comment {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  content   String?
  published Boolean  @default(false)

  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String
  review   Review @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  reviewId String
}
